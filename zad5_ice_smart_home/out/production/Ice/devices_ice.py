# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.7
#
# <auto-generated>
#
# Generated from file `devices.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Devices
_M_Devices = Ice.openModule('Devices')
__name__ = 'Devices'

if 'RangeException' not in _M_Devices.__dict__:
    _M_Devices.RangeException = Ice.createTempClass()
    class RangeException(Ice.UserException):
        def __init__(self, number=0.0, min=0.0, max=0.0):
            self.number = number
            self.min = min
            self.max = max

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Devices::RangeException'

    _M_Devices._t_RangeException = IcePy.defineException('::Devices::RangeException', RangeException, (), False, None, (
        ('number', (), IcePy._t_float, False, 0),
        ('min', (), IcePy._t_float, False, 0),
        ('max', (), IcePy._t_float, False, 0)
    ))
    RangeException._ice_type = _M_Devices._t_RangeException

    _M_Devices.RangeException = RangeException
    del RangeException

if '_t_Names' not in _M_Devices.__dict__:
    _M_Devices._t_Names = IcePy.defineSequence('::Devices::Names', (), IcePy._t_string)

_M_Devices._t_DevicesManager = IcePy.defineValue('::Devices::DevicesManager', Ice.Value, -1, (), False, True, None, ())

if 'DevicesManagerPrx' not in _M_Devices.__dict__:
    _M_Devices.DevicesManagerPrx = Ice.createTempClass()
    class DevicesManagerPrx(Ice.ObjectPrx):

        def getAllDevicesNames(self, context=None):
            return _M_Devices.DevicesManager._op_getAllDevicesNames.invoke(self, ((), context))

        def getAllDevicesNamesAsync(self, context=None):
            return _M_Devices.DevicesManager._op_getAllDevicesNames.invokeAsync(self, ((), context))

        def begin_getAllDevicesNames(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Devices.DevicesManager._op_getAllDevicesNames.begin(self, ((), _response, _ex, _sent, context))

        def end_getAllDevicesNames(self, _r):
            return _M_Devices.DevicesManager._op_getAllDevicesNames.end(self, _r)

        def setDevicesNames(self, names, context=None):
            return _M_Devices.DevicesManager._op_setDevicesNames.invoke(self, ((names, ), context))

        def setDevicesNamesAsync(self, names, context=None):
            return _M_Devices.DevicesManager._op_setDevicesNames.invokeAsync(self, ((names, ), context))

        def begin_setDevicesNames(self, names, _response=None, _ex=None, _sent=None, context=None):
            return _M_Devices.DevicesManager._op_setDevicesNames.begin(self, ((names, ), _response, _ex, _sent, context))

        def end_setDevicesNames(self, _r):
            return _M_Devices.DevicesManager._op_setDevicesNames.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Devices.DevicesManagerPrx.ice_checkedCast(proxy, '::Devices::DevicesManager', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Devices.DevicesManagerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Devices::DevicesManager'
    _M_Devices._t_DevicesManagerPrx = IcePy.defineProxy('::Devices::DevicesManager', DevicesManagerPrx)

    _M_Devices.DevicesManagerPrx = DevicesManagerPrx
    del DevicesManagerPrx

    _M_Devices.DevicesManager = Ice.createTempClass()
    class DevicesManager(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Devices::DevicesManager', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Devices::DevicesManager'

        @staticmethod
        def ice_staticId():
            return '::Devices::DevicesManager'

        def getAllDevicesNames(self, current=None):
            raise NotImplementedError("servant method 'getAllDevicesNames' not implemented")

        def setDevicesNames(self, names, current=None):
            raise NotImplementedError("servant method 'setDevicesNames' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Devices._t_DevicesManagerDisp)

        __repr__ = __str__

    _M_Devices._t_DevicesManagerDisp = IcePy.defineClass('::Devices::DevicesManager', DevicesManager, (), None, ())
    DevicesManager._ice_type = _M_Devices._t_DevicesManagerDisp

    DevicesManager._op_getAllDevicesNames = IcePy.Operation('getAllDevicesNames', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Devices._t_Names, False, 0), ())
    DevicesManager._op_setDevicesNames = IcePy.Operation('setDevicesNames', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Devices._t_Names, False, 0),), (), None, ())

    _M_Devices.DevicesManager = DevicesManager
    del DevicesManager

_M_Devices._t_Microwave = IcePy.defineValue('::Devices::Microwave', Ice.Value, -1, (), False, True, None, ())

if 'MicrowavePrx' not in _M_Devices.__dict__:
    _M_Devices.MicrowavePrx = Ice.createTempClass()
    class MicrowavePrx(Ice.ObjectPrx):

        def setTemp(self, newTemp, context=None):
            return _M_Devices.Microwave._op_setTemp.invoke(self, ((newTemp, ), context))

        def setTempAsync(self, newTemp, context=None):
            return _M_Devices.Microwave._op_setTemp.invokeAsync(self, ((newTemp, ), context))

        def begin_setTemp(self, newTemp, _response=None, _ex=None, _sent=None, context=None):
            return _M_Devices.Microwave._op_setTemp.begin(self, ((newTemp, ), _response, _ex, _sent, context))

        def end_setTemp(self, _r):
            return _M_Devices.Microwave._op_setTemp.end(self, _r)

        def getTemp(self, context=None):
            return _M_Devices.Microwave._op_getTemp.invoke(self, ((), context))

        def getTempAsync(self, context=None):
            return _M_Devices.Microwave._op_getTemp.invokeAsync(self, ((), context))

        def begin_getTemp(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Devices.Microwave._op_getTemp.begin(self, ((), _response, _ex, _sent, context))

        def end_getTemp(self, _r):
            return _M_Devices.Microwave._op_getTemp.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Devices.MicrowavePrx.ice_checkedCast(proxy, '::Devices::Microwave', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Devices.MicrowavePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Devices::Microwave'
    _M_Devices._t_MicrowavePrx = IcePy.defineProxy('::Devices::Microwave', MicrowavePrx)

    _M_Devices.MicrowavePrx = MicrowavePrx
    del MicrowavePrx

    _M_Devices.Microwave = Ice.createTempClass()
    class Microwave(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Devices::Microwave', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Devices::Microwave'

        @staticmethod
        def ice_staticId():
            return '::Devices::Microwave'

        def setTemp(self, newTemp, current=None):
            raise NotImplementedError("servant method 'setTemp' not implemented")

        def getTemp(self, current=None):
            raise NotImplementedError("servant method 'getTemp' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Devices._t_MicrowaveDisp)

        __repr__ = __str__

    _M_Devices._t_MicrowaveDisp = IcePy.defineClass('::Devices::Microwave', Microwave, (), None, ())
    Microwave._ice_type = _M_Devices._t_MicrowaveDisp

    Microwave._op_setTemp = IcePy.Operation('setTemp', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_float, False, 0),), (), None, (_M_Devices._t_RangeException,))
    Microwave._op_getTemp = IcePy.Operation('getTemp', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_float, False, 0), ())

    _M_Devices.Microwave = Microwave
    del Microwave

_M_Devices._t_Fridge = IcePy.defineValue('::Devices::Fridge', Ice.Value, -1, (), False, True, None, ())

if 'FridgePrx' not in _M_Devices.__dict__:
    _M_Devices.FridgePrx = Ice.createTempClass()
    class FridgePrx(Ice.ObjectPrx):

        def switchLight(self, lightState, context=None):
            return _M_Devices.Fridge._op_switchLight.invoke(self, ((lightState, ), context))

        def switchLightAsync(self, lightState, context=None):
            return _M_Devices.Fridge._op_switchLight.invokeAsync(self, ((lightState, ), context))

        def begin_switchLight(self, lightState, _response=None, _ex=None, _sent=None, context=None):
            return _M_Devices.Fridge._op_switchLight.begin(self, ((lightState, ), _response, _ex, _sent, context))

        def end_switchLight(self, _r):
            return _M_Devices.Fridge._op_switchLight.end(self, _r)

        def isLightOn(self, context=None):
            return _M_Devices.Fridge._op_isLightOn.invoke(self, ((), context))

        def isLightOnAsync(self, context=None):
            return _M_Devices.Fridge._op_isLightOn.invokeAsync(self, ((), context))

        def begin_isLightOn(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Devices.Fridge._op_isLightOn.begin(self, ((), _response, _ex, _sent, context))

        def end_isLightOn(self, _r):
            return _M_Devices.Fridge._op_isLightOn.end(self, _r)

        def setFridgeTemp(self, newTemp, context=None):
            return _M_Devices.Fridge._op_setFridgeTemp.invoke(self, ((newTemp, ), context))

        def setFridgeTempAsync(self, newTemp, context=None):
            return _M_Devices.Fridge._op_setFridgeTemp.invokeAsync(self, ((newTemp, ), context))

        def begin_setFridgeTemp(self, newTemp, _response=None, _ex=None, _sent=None, context=None):
            return _M_Devices.Fridge._op_setFridgeTemp.begin(self, ((newTemp, ), _response, _ex, _sent, context))

        def end_setFridgeTemp(self, _r):
            return _M_Devices.Fridge._op_setFridgeTemp.end(self, _r)

        def getFridgeTemp(self, context=None):
            return _M_Devices.Fridge._op_getFridgeTemp.invoke(self, ((), context))

        def getFridgeTempAsync(self, context=None):
            return _M_Devices.Fridge._op_getFridgeTemp.invokeAsync(self, ((), context))

        def begin_getFridgeTemp(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Devices.Fridge._op_getFridgeTemp.begin(self, ((), _response, _ex, _sent, context))

        def end_getFridgeTemp(self, _r):
            return _M_Devices.Fridge._op_getFridgeTemp.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Devices.FridgePrx.ice_checkedCast(proxy, '::Devices::Fridge', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Devices.FridgePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Devices::Fridge'
    _M_Devices._t_FridgePrx = IcePy.defineProxy('::Devices::Fridge', FridgePrx)

    _M_Devices.FridgePrx = FridgePrx
    del FridgePrx

    _M_Devices.Fridge = Ice.createTempClass()
    class Fridge(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Devices::Fridge', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Devices::Fridge'

        @staticmethod
        def ice_staticId():
            return '::Devices::Fridge'

        def switchLight(self, lightState, current=None):
            raise NotImplementedError("servant method 'switchLight' not implemented")

        def isLightOn(self, current=None):
            raise NotImplementedError("servant method 'isLightOn' not implemented")

        def setFridgeTemp(self, newTemp, current=None):
            raise NotImplementedError("servant method 'setFridgeTemp' not implemented")

        def getFridgeTemp(self, current=None):
            raise NotImplementedError("servant method 'getFridgeTemp' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Devices._t_FridgeDisp)

        __repr__ = __str__

    _M_Devices._t_FridgeDisp = IcePy.defineClass('::Devices::Fridge', Fridge, (), None, ())
    Fridge._ice_type = _M_Devices._t_FridgeDisp

    Fridge._op_switchLight = IcePy.Operation('switchLight', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_bool, False, 0),), (), None, ())
    Fridge._op_isLightOn = IcePy.Operation('isLightOn', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_bool, False, 0), ())
    Fridge._op_setFridgeTemp = IcePy.Operation('setFridgeTemp', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_float, False, 0),), (), None, (_M_Devices._t_RangeException,))
    Fridge._op_getFridgeTemp = IcePy.Operation('getFridgeTemp', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_float, False, 0), ())

    _M_Devices.Fridge = Fridge
    del Fridge

_M_Devices._t_FridgeWithFreezer = IcePy.defineValue('::Devices::FridgeWithFreezer', Ice.Value, -1, (), False, True, None, ())

if 'FridgeWithFreezerPrx' not in _M_Devices.__dict__:
    _M_Devices.FridgeWithFreezerPrx = Ice.createTempClass()
    class FridgeWithFreezerPrx(_M_Devices.FridgePrx):

        def setFreezerTemp(self, newTemp, context=None):
            return _M_Devices.FridgeWithFreezer._op_setFreezerTemp.invoke(self, ((newTemp, ), context))

        def setFreezerTempAsync(self, newTemp, context=None):
            return _M_Devices.FridgeWithFreezer._op_setFreezerTemp.invokeAsync(self, ((newTemp, ), context))

        def begin_setFreezerTemp(self, newTemp, _response=None, _ex=None, _sent=None, context=None):
            return _M_Devices.FridgeWithFreezer._op_setFreezerTemp.begin(self, ((newTemp, ), _response, _ex, _sent, context))

        def end_setFreezerTemp(self, _r):
            return _M_Devices.FridgeWithFreezer._op_setFreezerTemp.end(self, _r)

        def getFreezerTemp(self, context=None):
            return _M_Devices.FridgeWithFreezer._op_getFreezerTemp.invoke(self, ((), context))

        def getFreezerTempAsync(self, context=None):
            return _M_Devices.FridgeWithFreezer._op_getFreezerTemp.invokeAsync(self, ((), context))

        def begin_getFreezerTemp(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Devices.FridgeWithFreezer._op_getFreezerTemp.begin(self, ((), _response, _ex, _sent, context))

        def end_getFreezerTemp(self, _r):
            return _M_Devices.FridgeWithFreezer._op_getFreezerTemp.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Devices.FridgeWithFreezerPrx.ice_checkedCast(proxy, '::Devices::FridgeWithFreezer', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Devices.FridgeWithFreezerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Devices::FridgeWithFreezer'
    _M_Devices._t_FridgeWithFreezerPrx = IcePy.defineProxy('::Devices::FridgeWithFreezer', FridgeWithFreezerPrx)

    _M_Devices.FridgeWithFreezerPrx = FridgeWithFreezerPrx
    del FridgeWithFreezerPrx

    _M_Devices.FridgeWithFreezer = Ice.createTempClass()
    class FridgeWithFreezer(_M_Devices.Fridge):

        def ice_ids(self, current=None):
            return ('::Devices::Fridge', '::Devices::FridgeWithFreezer', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Devices::FridgeWithFreezer'

        @staticmethod
        def ice_staticId():
            return '::Devices::FridgeWithFreezer'

        def setFreezerTemp(self, newTemp, current=None):
            raise NotImplementedError("servant method 'setFreezerTemp' not implemented")

        def getFreezerTemp(self, current=None):
            raise NotImplementedError("servant method 'getFreezerTemp' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Devices._t_FridgeWithFreezerDisp)

        __repr__ = __str__

    _M_Devices._t_FridgeWithFreezerDisp = IcePy.defineClass('::Devices::FridgeWithFreezer', FridgeWithFreezer, (), None, (_M_Devices._t_FridgeDisp,))
    FridgeWithFreezer._ice_type = _M_Devices._t_FridgeWithFreezerDisp

    FridgeWithFreezer._op_setFreezerTemp = IcePy.Operation('setFreezerTemp', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_float, False, 0),), (), None, (_M_Devices._t_RangeException,))
    FridgeWithFreezer._op_getFreezerTemp = IcePy.Operation('getFreezerTemp', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_float, False, 0), ())

    _M_Devices.FridgeWithFreezer = FridgeWithFreezer
    del FridgeWithFreezer

if '_t_measurements' not in _M_Devices.__dict__:
    _M_Devices._t_measurements = IcePy.defineDictionary('::Devices::measurements', (), IcePy._t_string, IcePy._t_float)

if 'TimeOfDay' not in _M_Devices.__dict__:
    _M_Devices.TimeOfDay = Ice.createTempClass()
    class TimeOfDay(object):
        def __init__(self, hour=0, minute=0, second=0):
            self.hour = hour
            self.minute = minute
            self.second = second

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.hour)
            _h = 5 * _h + Ice.getHash(self.minute)
            _h = 5 * _h + Ice.getHash(self.second)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_Devices.TimeOfDay):
                return NotImplemented
            else:
                if self.hour is None or other.hour is None:
                    if self.hour != other.hour:
                        return (-1 if self.hour is None else 1)
                else:
                    if self.hour < other.hour:
                        return -1
                    elif self.hour > other.hour:
                        return 1
                if self.minute is None or other.minute is None:
                    if self.minute != other.minute:
                        return (-1 if self.minute is None else 1)
                else:
                    if self.minute < other.minute:
                        return -1
                    elif self.minute > other.minute:
                        return 1
                if self.second is None or other.second is None:
                    if self.second != other.second:
                        return (-1 if self.second is None else 1)
                else:
                    if self.second < other.second:
                        return -1
                    elif self.second > other.second:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_Devices._t_TimeOfDay)

        __repr__ = __str__

    _M_Devices._t_TimeOfDay = IcePy.defineStruct('::Devices::TimeOfDay', TimeOfDay, (), (
        ('hour', (), IcePy._t_int),
        ('minute', (), IcePy._t_int),
        ('second', (), IcePy._t_int)
    ))

    _M_Devices.TimeOfDay = TimeOfDay
    del TimeOfDay

_M_Devices._t_Sensor = IcePy.defineValue('::Devices::Sensor', Ice.Value, -1, (), False, True, None, ())

if 'SensorPrx' not in _M_Devices.__dict__:
    _M_Devices.SensorPrx = Ice.createTempClass()
    class SensorPrx(Ice.ObjectPrx):

        def getTemp(self, context=None):
            return _M_Devices.Sensor._op_getTemp.invoke(self, ((), context))

        def getTempAsync(self, context=None):
            return _M_Devices.Sensor._op_getTemp.invokeAsync(self, ((), context))

        def begin_getTemp(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Devices.Sensor._op_getTemp.begin(self, ((), _response, _ex, _sent, context))

        def end_getTemp(self, _r):
            return _M_Devices.Sensor._op_getTemp.end(self, _r)

        def getLuminousIntensity(self, context=None):
            return _M_Devices.Sensor._op_getLuminousIntensity.invoke(self, ((), context))

        def getLuminousIntensityAsync(self, context=None):
            return _M_Devices.Sensor._op_getLuminousIntensity.invokeAsync(self, ((), context))

        def begin_getLuminousIntensity(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Devices.Sensor._op_getLuminousIntensity.begin(self, ((), _response, _ex, _sent, context))

        def end_getLuminousIntensity(self, _r):
            return _M_Devices.Sensor._op_getLuminousIntensity.end(self, _r)

        def makeMeasurements(self, context=None):
            return _M_Devices.Sensor._op_makeMeasurements.invoke(self, ((), context))

        def makeMeasurementsAsync(self, context=None):
            return _M_Devices.Sensor._op_makeMeasurements.invokeAsync(self, ((), context))

        def begin_makeMeasurements(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Devices.Sensor._op_makeMeasurements.begin(self, ((), _response, _ex, _sent, context))

        def end_makeMeasurements(self, _r):
            return _M_Devices.Sensor._op_makeMeasurements.end(self, _r)

        def getTimeOfDay(self, context=None):
            return _M_Devices.Sensor._op_getTimeOfDay.invoke(self, ((), context))

        def getTimeOfDayAsync(self, context=None):
            return _M_Devices.Sensor._op_getTimeOfDay.invokeAsync(self, ((), context))

        def begin_getTimeOfDay(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Devices.Sensor._op_getTimeOfDay.begin(self, ((), _response, _ex, _sent, context))

        def end_getTimeOfDay(self, _r):
            return _M_Devices.Sensor._op_getTimeOfDay.end(self, _r)

        def getAllMeasurements(self, context=None):
            return _M_Devices.Sensor._op_getAllMeasurements.invoke(self, ((), context))

        def getAllMeasurementsAsync(self, context=None):
            return _M_Devices.Sensor._op_getAllMeasurements.invokeAsync(self, ((), context))

        def begin_getAllMeasurements(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Devices.Sensor._op_getAllMeasurements.begin(self, ((), _response, _ex, _sent, context))

        def end_getAllMeasurements(self, _r):
            return _M_Devices.Sensor._op_getAllMeasurements.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Devices.SensorPrx.ice_checkedCast(proxy, '::Devices::Sensor', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Devices.SensorPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Devices::Sensor'
    _M_Devices._t_SensorPrx = IcePy.defineProxy('::Devices::Sensor', SensorPrx)

    _M_Devices.SensorPrx = SensorPrx
    del SensorPrx

    _M_Devices.Sensor = Ice.createTempClass()
    class Sensor(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Devices::Sensor', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Devices::Sensor'

        @staticmethod
        def ice_staticId():
            return '::Devices::Sensor'

        def getTemp(self, current=None):
            raise NotImplementedError("servant method 'getTemp' not implemented")

        def getLuminousIntensity(self, current=None):
            raise NotImplementedError("servant method 'getLuminousIntensity' not implemented")

        def makeMeasurements(self, current=None):
            raise NotImplementedError("servant method 'makeMeasurements' not implemented")

        def getTimeOfDay(self, current=None):
            raise NotImplementedError("servant method 'getTimeOfDay' not implemented")

        def getAllMeasurements(self, current=None):
            raise NotImplementedError("servant method 'getAllMeasurements' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Devices._t_SensorDisp)

        __repr__ = __str__

    _M_Devices._t_SensorDisp = IcePy.defineClass('::Devices::Sensor', Sensor, (), None, ())
    Sensor._ice_type = _M_Devices._t_SensorDisp

    Sensor._op_getTemp = IcePy.Operation('getTemp', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_float, False, 0), ())
    Sensor._op_getLuminousIntensity = IcePy.Operation('getLuminousIntensity', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_float, False, 0), ())
    Sensor._op_makeMeasurements = IcePy.Operation('makeMeasurements', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    Sensor._op_getTimeOfDay = IcePy.Operation('getTimeOfDay', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Devices._t_TimeOfDay, False, 0), ())
    Sensor._op_getAllMeasurements = IcePy.Operation('getAllMeasurements', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Devices._t_measurements, False, 0), ())

    _M_Devices.Sensor = Sensor
    del Sensor

_M_Devices._t_PressureSensor = IcePy.defineValue('::Devices::PressureSensor', Ice.Value, -1, (), False, True, None, ())

if 'PressureSensorPrx' not in _M_Devices.__dict__:
    _M_Devices.PressureSensorPrx = Ice.createTempClass()
    class PressureSensorPrx(_M_Devices.SensorPrx):

        def getPressure(self, context=None):
            return _M_Devices.PressureSensor._op_getPressure.invoke(self, ((), context))

        def getPressureAsync(self, context=None):
            return _M_Devices.PressureSensor._op_getPressure.invokeAsync(self, ((), context))

        def begin_getPressure(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Devices.PressureSensor._op_getPressure.begin(self, ((), _response, _ex, _sent, context))

        def end_getPressure(self, _r):
            return _M_Devices.PressureSensor._op_getPressure.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Devices.PressureSensorPrx.ice_checkedCast(proxy, '::Devices::PressureSensor', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Devices.PressureSensorPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Devices::PressureSensor'
    _M_Devices._t_PressureSensorPrx = IcePy.defineProxy('::Devices::PressureSensor', PressureSensorPrx)

    _M_Devices.PressureSensorPrx = PressureSensorPrx
    del PressureSensorPrx

    _M_Devices.PressureSensor = Ice.createTempClass()
    class PressureSensor(_M_Devices.Sensor):

        def ice_ids(self, current=None):
            return ('::Devices::PressureSensor', '::Devices::Sensor', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Devices::PressureSensor'

        @staticmethod
        def ice_staticId():
            return '::Devices::PressureSensor'

        def getPressure(self, current=None):
            raise NotImplementedError("servant method 'getPressure' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Devices._t_PressureSensorDisp)

        __repr__ = __str__

    _M_Devices._t_PressureSensorDisp = IcePy.defineClass('::Devices::PressureSensor', PressureSensor, (), None, (_M_Devices._t_SensorDisp,))
    PressureSensor._ice_type = _M_Devices._t_PressureSensorDisp

    PressureSensor._op_getPressure = IcePy.Operation('getPressure', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_float, False, 0), ())

    _M_Devices.PressureSensor = PressureSensor
    del PressureSensor

_M_Devices._t_HumiditySensor = IcePy.defineValue('::Devices::HumiditySensor', Ice.Value, -1, (), False, True, None, ())

if 'HumiditySensorPrx' not in _M_Devices.__dict__:
    _M_Devices.HumiditySensorPrx = Ice.createTempClass()
    class HumiditySensorPrx(_M_Devices.SensorPrx):

        def getHumidity(self, context=None):
            return _M_Devices.HumiditySensor._op_getHumidity.invoke(self, ((), context))

        def getHumidityAsync(self, context=None):
            return _M_Devices.HumiditySensor._op_getHumidity.invokeAsync(self, ((), context))

        def begin_getHumidity(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Devices.HumiditySensor._op_getHumidity.begin(self, ((), _response, _ex, _sent, context))

        def end_getHumidity(self, _r):
            return _M_Devices.HumiditySensor._op_getHumidity.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Devices.HumiditySensorPrx.ice_checkedCast(proxy, '::Devices::HumiditySensor', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Devices.HumiditySensorPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Devices::HumiditySensor'
    _M_Devices._t_HumiditySensorPrx = IcePy.defineProxy('::Devices::HumiditySensor', HumiditySensorPrx)

    _M_Devices.HumiditySensorPrx = HumiditySensorPrx
    del HumiditySensorPrx

    _M_Devices.HumiditySensor = Ice.createTempClass()
    class HumiditySensor(_M_Devices.Sensor):

        def ice_ids(self, current=None):
            return ('::Devices::HumiditySensor', '::Devices::Sensor', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Devices::HumiditySensor'

        @staticmethod
        def ice_staticId():
            return '::Devices::HumiditySensor'

        def getHumidity(self, current=None):
            raise NotImplementedError("servant method 'getHumidity' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Devices._t_HumiditySensorDisp)

        __repr__ = __str__

    _M_Devices._t_HumiditySensorDisp = IcePy.defineClass('::Devices::HumiditySensor', HumiditySensor, (), None, (_M_Devices._t_SensorDisp,))
    HumiditySensor._ice_type = _M_Devices._t_HumiditySensorDisp

    HumiditySensor._op_getHumidity = IcePy.Operation('getHumidity', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_float, False, 0), ())

    _M_Devices.HumiditySensor = HumiditySensor
    del HumiditySensor

# End of module Devices
