/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.agh.reactive;
import akka.Done;
import akka.NotUsed;
import akka.actor.typed.ActorSystem;
import akka.actor.typed.scaladsl.Behaviors;
import akka.japi.Pair;
import akka.stream.*;
import akka.stream.javadsl.*;
import edu.agh.reactive.math.MathActor;


import java.io.IOException;
import java.util.concurrent.CompletionStage;

public class App {
    public static void main(String[] args) {
        //////////////////////////////////////////
        //TASK 0 - hello
        // create actor system

        //final ActorSystem<String> helloSystem =
        //                ActorSystem.create(HelloActor.create(), "helloActor");
        // send messages
        //helloSystem.tell("hello world");


        //////////////////////////////////////////
        //TASK 1 - math operations
///        final ActorSystem<MathActor.MathCommand> mathContext =
///                ActorSystem.create(MathActor.create(), "actorMath");
///        System.out.println("math main: actor system ready");

        // send messages
///        mathContext.tell(new MathActor.MathCommandAdd(5, 3));
///        mathContext.tell(new MathActor.MathCommandMultiply(5, 3, null));
//        mathContext.tell(new MathActor.MathCommandMultiply(5, 2, null));
//        mathContext.tell(new MathActor.MathCommandDivide(15, 3, null));
//        mathContext.tell(new MathActor.MathCommandDivide(15, 5, null));
//
//        mathContext.tell(new MathActor.MathCommandDivide(15, 0, null));
//        Thread.sleep(2000);
//
//        System.out.println("Math main: sending second package of messages");
//        mathContext.tell(new MathActor.MathCommandMultiply(5, 3, null));
//        mathContext.tell(new MathActor.MathCommandMultiply(5, 2, null));
//        mathContext.tell(new MathActor.MathCommandDivide(15, 3, null));
//        mathContext.tell(new MathActor.MathCommandDivide(15, 5, null));
///        System.out.println("Math main: messages send");



        /// TASK 2 - Reactive Streams in Akka Streams
        final ActorSystem streamSystem = ActorSystem.create(Behaviors.empty(), "streams");
        final Materializer materializer = Materializer.createMaterializer(streamSystem);

        final Source<Integer, NotUsed> source = Source.range(1, 100);
        final Flow<Integer, String, NotUsed> debugFlow = Flow.fromFunction((Integer n) -> {
            System.out.println(n + " as Integer");
            return n.toString();
        }).async().buffer(16, OverflowStrategy.dropTail());
        //przed dodaniem async Flow by≈Ç przetwarzany razem z Sink

        final Sink<String, CompletionStage<Done>> sink = Sink.foreach(str -> {
            Thread.sleep(1000);
            System.out.println(str + " as String");
        });

        final RunnableGraph<NotUsed> runnableGraph = source.via(debugFlow).to(sink);
        runnableGraph.run(materializer);


        // TASK 3 - graph dsl
        // how to create

//        final Source<Integer, NotUsed> in = Source.range(1, 100);
//        final Sink<Pair<Integer, Integer>, CompletionStage<Done>> sink = Sink.foreach(System.out::println);
//        final Flow<Integer, Integer, NotUsed> additionFlow = Flow.of(Integer.class).map(integer -> integer + 1);
//        final Flow<Integer, Integer, NotUsed> multiplicationFlow = Flow.of(Integer.class).map(integer -> integer * 10);
//
//        final Graph<ClosedShape, CompletionStage<Done>> graph = GraphDSL.create(sink, (builder, out) -> {
//            final UniformFanOutShape<Integer, Integer> broadcast = builder.add(Broadcast.create(2));
//            final FanInShape2<Integer, Integer, Pair<Integer, Integer>> zip = builder.add(Zip.create());
//            final Outlet<Integer> source = builder.add(in).out();
//
//            builder.from(source).toFanOut(broadcast);
//            builder.from(broadcast).via(builder.add(additionFlow)).toInlet(zip.in0());
//            builder.from(broadcast).via(builder.add(multiplicationFlow)).toInlet(zip.in1());
//            builder.from(zip.out()).to(out);
//
//            return ClosedShape.getInstance();
//        });
//
//        final ActorSystem graphStreamSystem = ActorSystem.create(Behaviors.empty(), "dsl");
//        final Materializer graphMaterializer = Materializer.createMaterializer(graphStreamSystem);
//        RunnableGraph.fromGraph(graph).run(graphMaterializer);



        try {
            System.out.println(">>> Press ENTER to exit <<<");
            System.in.read();
        } catch (IOException ignored) {
        } finally {
//            greeterMain.terminate();
//            mathContext.terminate();
//            helloSystem.terminate();
            streamSystem.terminate();
//            graphStreamSystem.terminate();
        }
    }
}
